C51 COMPILER V5.02,  SN-  UART                                                             11/02/16  23:52:55  PAGE 1   


DOS C51 COMPILER V5.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN UART.OBJ
COMPILER INVOKED BY: C:\C55\C51.EXE UART.C IP SB CD WL(2) ROM(LARGE) SMALL PL(24575) 

stmt level    source

   1          /* Modification History
   2          * 2016-10-21 jep Made interrupt driven version.
   3          * 2016-10-20 jep Pruned for CCC.
   4          */
   5          
   6          #define Uart_C
   7          #include "misc.h"
   8          #include "8031.h"
   9          #include "slf32x.h"
  10          #include "myboard.h"
  11          #include "uart.h"
  12          
  13          /* stuff enters queue at tail and leaves from head */
  14          
  15          #define UartRxQLength ((byte)(1<<3))
  16          Mutex static xdata byte uartRxQ[UartRxQLength];
  17          Mutex static xdata byte uartRxQHead;
  18          Mutex static xdata byte uartRxQTail;
  19          
  20          #define UartTxQLength ((byte)(1<<5))
  21          Mutex static xdata byte uartTxQ[UartTxQLength];
  22          Mutex static xdata byte uartTxQHead;
  23          Mutex static xdata byte uartTxQTail;
  24          #if 0
              Mutex static flag transmitterIsRunning=False; /* $$$ check code */
              #else
  27          Mutex static flag transmitterIsRunning; /* $$$ check code */
  28          #endif
  29          
  30          /*****************************************************************************/
  31          
  32          void putUartByte(byte c)
  33          {
  34   1         /* wait for room in uartTxQ */
  35   1      #if 1 /* idata head and tail */
  36   1         for (;;) {
  37   2            es=False;
  38   2            if ((byte)(uartTxQHead-uartTxQTail-1)%UartTxQLength>0)
  39   2               break;
  40   2            es=True;
  41   2         }
  42   1         es=True;
  43   1      #else
                 while ((byte)(uartTxQHead-uartTxQTail-1)%UartTxQLength<=0)
                    ;
              #endif
  47   1      
  48   1         es=False;
  49   1         if (transmitterIsRunning) {
  50   2            uartTxQ[uartTxQTail%UartTxQLength]=c;
  51   2            uartTxQTail++;
  52   2         }
  53   1         else { /* prime the pump */
  54   2            sbuf=c;
  55   2            transmitterIsRunning=True;
  56   2         }
  57   1         es=True;
  58   1      }
  59          
  60          /******************************************************************************
  61          * returns how many bytes are in transmit queue */
  62          
  63          byte uartTxQHas(void)
  64          {
  65   1         return ((byte)(uartTxQTail-uartTxQHead))%UartTxQLength;
  66   1      }
  67          
  68          /*****************************************************************************/
  69          
  70          byte getUartByte(void)
  71          {
  72   1         byte c;
  73   1      
  74   1      #if 1 /* idata head and tail */
  75   1         for (;;) {
  76   2            es=False; /* disable serial interrupt */
  77   2            if ((byte)(uartRxQTail-uartRxQHead)%UartRxQLength>0)
  78   2               break;
  79   2            es=True; /* enable serial interrupts */
  80   2         }
  81   1         es=True; /* enable serial interrupts */
  82   1      #else
                 /* Note: because uartRxQHead and uartRxQTail are each only a byte long,
                 *  interrupts do not have to be disabled.
                 *  Nonetheless care is warranted.  */
              
                 while ((byte)(uartRxQTail-uartRxQHead)%UartRxQLength==0)
                    ;
              #endif
  90   1      
  91   1      #if 1 /* idata head and tail */
  92   1         es=False; /* disable serial interrupt */
  93   1      #endif
  94   1         c=uartRxQ[uartRxQHead%UartRxQLength];
  95   1         uartRxQHead++;
  96   1      #if 1 /* idata head and tail */
  97   1         es=True; /* enable serial interrupts */
  98   1      #endif
  99   1      
 100   1         return c;
 101   1      }
 102          
 103          /******************************************************************************
 104          * returns how many bytes are in receive queue */
 105          
 106          byte uartRxQHas(void)
 107          {
 108   1         return ((byte)(uartRxQTail-uartRxQHead))%UartRxQLength;
 109   1      }
 110          
 111          /*****************************************************************************/
 112          
 113          void setUartBitRate(word bitRate /* unit is 1 bit per second */)
 114          {
 115   1         idata byte i=-((Sysclk+(Timer01Prescale*2*(ulong)bitRate)/2/*rounding term*/)
 116   1         /                      (Timer01Prescale*2*(ulong)bitRate));
 117   1      /*$$$ for Sysclk==22.1184MHz Timer01Prescale==48 bitRate==1200, 
 118   1      * $$$ i should be 0x40 (-192) */
 119   1      /*$$$ for Sysclk==22.1184MHz Timer01Prescale==48 bitRate==19200, 
 120   1      * $$$ i should be 0xF4 (-12) */
 121   1      /*$$$ for Sysclk==24MHz Timer01Prescale==48 
 122   1      * $$$ and bitRate==1200  i should be -208.333 (0x30) (+0.16% bit rate error)
 123   1      * $$$ and bitRate==9600  i should be  -26.042 (0xE6) (+0.16% bit rate error)
 124   1      * $$$ and bitRate==19200 i should be  -13.021 (0xF3) (+0.16% bit rate error)
 125   1      * $$$ and bitRate==38400 i should be   -6.510 (0xF9) (-6.99% bit rate error)
 126   1      * $$$ The need to support 1200 for PnP, limits the bit rates to 19200, 
 127   1      * $$$ when Sysclk is 24MHz. 
 128   1      * $$$ for Sysclk==6MHz Timer01Prescale==12
 129   1      * $$$ and bitRate==19200 i should be  -13.021 (0xF3) (+0.16% bit rate error)
 130   1      * $$$ for Sysclk==3MHz Timer01Prescale==1
 131   1      * $$$ and bitRate==19200 i should be  -78.125 (0xB2) (+0.16% bit rate error)
 132   1      */
 133   1      #if 0
                 /* for ordinary 8051 CPUS, (but not the Silicon Labs derivatives). */
                 pcon|=Smod1_Mask; /* SMOD1=True; for faster baud rates */
              #endif
 137   1      
 138   1         th1=i;
 139   1         tl1=i;
 140   1      }
 141          
 142          /*****************************************************************************/
 143          
 144          void uartInterruptHandler(void) interrupt 4
 145          {
 146   1         if (ri) {
 147   2            if ((byte)(uartRxQHead-uartRxQTail-1)%UartRxQLength>0) {
 148   3               uartRxQ[uartRxQTail%UartRxQLength]=sbuf;
 149   3               ri=False;
 150   3               uartRxQTail++;
 151   3            }
 152   2            else { /* no room in uartRxQ, so throw away new byte */
 153   3      #if defined(Keil)
 154   3               acc=/* compensate for Keil compiler's inability to do volatile regs */
 155   3      #endif
 156   3               sbuf;
 157   3               ri=False;
 158   3            }
 159   2         }
 160   1      
 161   1         if (ti) {
 162   2            ti=False;
 163   2            if ((byte)(uartTxQTail-uartTxQHead)%UartTxQLength>0) {
 164   3               sbuf=uartTxQ[uartTxQHead%UartTxQLength];
 165   3               uartTxQHead++;
 166   3               transmitterIsRunning=True;
 167   3            }
 168   2            else
 169   2               transmitterIsRunning=False;
 170   2         }
 171   1      }
 172          
 173          /*****************************************************************************/
 174          
 175          void initializeUart(word bitRate)
 176          {
 177   1         byte i;
 178   1      
 179   1         es=False;
 180   1      
 181   1         i=ckcon;
 182   1         i&=~(T1M_Mask|Timer01Prescale_Mask);
 183   1      #if Timer01Prescale==48
                 i|=PrescaleSysClkDiv48;
              #elif Timer01Prescale==12
 186   1         i|=PrescaleSysClkDiv12;
 187   1      #elif Timer01Prescale==1
                 i|=T1M_Mask;
              #else
                 error missing code for Timer01Prescale
              #endif
 192   1         ckcon=i;
 193   1         /* timer 1 8-bit auto-reload SYSCLK */
 194   1         et1=False;
 195   1         tr1=False;
 196   1         i=tmod;
 197   1         i=(i&~0xF0)|0x20;
 198   1         tmod=i;
 199   1         setUartBitRate(bitRate);
 200   1         tr1=True;
 201   1      
 202   1      #if 0
                 rxd=1; /* float to allow UART to use this pin */
                 txd=1; /* to allow UART to use this pin */
              #endif
 206   1         scon=UART8N1Mode|MCE0|ReceiveEnable_Mask; /* 8N1 UART */
 207   1      #if 0
                 scon=0x50; /* plain old 8N1 UART, rx enabled */
              #endif
 210   1         /* flush the receive buffer */
 211   1      #if defined(Keil)
 212   1         acc= /* crappy Keil compiler can't do volatile registers */
 213   1      #endif
 214   1         sbuf;
 215   1      #if defined(Keil)
 216   1         acc= /* crappy Keil compiler can't do volatile registers */
 217   1      #endif
 218   1         sbuf;
 219   1         uartRxQHead=uartRxQTail=0;
 220   1         uartTxQHead=uartTxQTail=0;
 221   1         transmitterIsRunning=False;
 222   1      
 223   1         ps=1; /* high priority */
 224   1         es=True;
 225   1      }
 226          
C51 COMPILER V5.02,  SN-  UART                                                             11/02/16  23:52:55  PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _putUartByte (BEGIN)
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 36
0000         ?C0001:
                                           ; SOURCE LINE # 37
0000 C2AC          CLR     es
                                           ; SOURCE LINE # 38
0002 900000  R     MOV     DPTR,#uartTxQTail
0005 E0            MOVX    A,@DPTR
0006 FE            MOV     R6,A
0007 900000  R     MOV     DPTR,#uartTxQHead
000A E0            MOVX    A,@DPTR
000B C3            CLR     C
000C 9E            SUBB    A,R6
000D 14            DEC     A
000E 541F          ANL     A,#01FH
0010 D3            SETB    C
0011 9400          SUBB    A,#00H
0013 5004          JNC     ?C0002
                                           ; SOURCE LINE # 39
0015         ?C0003:
                                           ; SOURCE LINE # 40
0015 D2AC          SETB    es
                                           ; SOURCE LINE # 41
0017 80E7          SJMP    ?C0001
0019         ?C0002:
                                           ; SOURCE LINE # 42
0019 D2AC          SETB    es
                                           ; SOURCE LINE # 48
001B C2AC          CLR     es
                                           ; SOURCE LINE # 49
001D E500    R     MOV     A,transmitterIsRunning
001F 6016          JZ      ?C0004
                                           ; SOURCE LINE # 50
0021 EE            MOV     A,R6
0022 541F          ANL     A,#01FH
0024 2400    R     ADD     A,#LOW uartTxQ
0026 F582          MOV     DPL,A
0028 E4            CLR     A
0029 3400    R     ADDC    A,#HIGH uartTxQ
002B F583          MOV     DPH,A
002D EF            MOV     A,R7
002E F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
002F 900000  R     MOV     DPTR,#uartTxQTail
0032 E0            MOVX    A,@DPTR
0033 04            INC     A
0034 F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
0035 8005          SJMP    ?C0005
0037         ?C0004:
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0037 8F99          MOV     sbuf,R7
                                           ; SOURCE LINE # 55
0039 750001  R     MOV     transmitterIsRunning,#01H
                                           ; SOURCE LINE # 56
003C         ?C0005:
                                           ; SOURCE LINE # 57
003C D2AC          SETB    es
                                           ; SOURCE LINE # 58
003E 22            RET     
             ; FUNCTION _putUartByte (END)

             ; FUNCTION uartTxQHas (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0000 900000  R     MOV     DPTR,#uartTxQHead
0003 E0            MOVX    A,@DPTR
0004 FF            MOV     R7,A
0005 900000  R     MOV     DPTR,#uartTxQTail
0008 E0            MOVX    A,@DPTR
0009 C3            CLR     C
000A 9F            SUBB    A,R7
000B 541F          ANL     A,#01FH
000D FF            MOV     R7,A
                                           ; SOURCE LINE # 66
000E         ?C0007:
000E 22            RET     
             ; FUNCTION uartTxQHas (END)

             ; FUNCTION getUartByte (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 75
0000         ?C0008:
                                           ; SOURCE LINE # 76
0000 C2AC          CLR     es
                                           ; SOURCE LINE # 77
0002 900000  R     MOV     DPTR,#uartRxQHead
0005 E0            MOVX    A,@DPTR
0006 FF            MOV     R7,A
0007 900000  R     MOV     DPTR,#uartRxQTail
000A E0            MOVX    A,@DPTR
000B C3            CLR     C
000C 9F            SUBB    A,R7
000D 5407          ANL     A,#07H
000F D3            SETB    C
0010 9400          SUBB    A,#00H
0012 5004          JNC     ?C0009
                                           ; SOURCE LINE # 78
0014         ?C0010:
                                           ; SOURCE LINE # 79
0014 D2AC          SETB    es
                                           ; SOURCE LINE # 80
0016 80E8          SJMP    ?C0008
0018         ?C0009:
                                           ; SOURCE LINE # 81
0018 D2AC          SETB    es
                                           ; SOURCE LINE # 92
001A C2AC          CLR     es
                                           ; SOURCE LINE # 94
001C EF            MOV     A,R7
001D 5407          ANL     A,#07H
001F 2400    R     ADD     A,#LOW uartRxQ
0021 F582          MOV     DPL,A
0023 E4            CLR     A
0024 3400    R     ADDC    A,#HIGH uartRxQ
0026 F583          MOV     DPH,A
0028 E0            MOVX    A,@DPTR
0029 FF            MOV     R7,A
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 95
002A 900000  R     MOV     DPTR,#uartRxQHead
002D E0            MOVX    A,@DPTR
002E 04            INC     A
002F F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0030 D2AC          SETB    es
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0032         ?C0011:
0032 22            RET     
             ; FUNCTION getUartByte (END)

             ; FUNCTION uartRxQHas (BEGIN)
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
0000 900000  R     MOV     DPTR,#uartRxQHead
0003 E0            MOVX    A,@DPTR
0004 FF            MOV     R7,A
0005 900000  R     MOV     DPTR,#uartRxQTail
0008 E0            MOVX    A,@DPTR
0009 C3            CLR     C
000A 9F            SUBB    A,R7
000B 5407          ANL     A,#07H
000D FF            MOV     R7,A
                                           ; SOURCE LINE # 109
000E         ?C0012:
000E 22            RET     
             ; FUNCTION uartRxQHas (END)

             ; FUNCTION _setUartBitRate (BEGIN)
0000 8E00    R     MOV     bitRate,R6
0002 8F00    R     MOV     bitRate+01H,R7
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0004 E4            CLR     A
0005 FC            MOV     R4,A
0006 FD            MOV     R5,A
0007 7B18          MOV     R3,#018H
0009 FA            MOV     R2,A
000A F9            MOV     R1,A
000B F8            MOV     R0,A
000C 120000  E     LCALL   ?C?LMUL
000F 7B02          MOV     R3,#02H
0011 7A00          MOV     R2,#00H
0013 7900          MOV     R1,#00H
0015 7800          MOV     R0,#00H
0017 120000  E     LCALL   ?C?ULDIV
001A EF            MOV     A,R7
001B 2480          ADD     A,#080H
001D FF            MOV     R7,A
001E EE            MOV     A,R6
001F 348D          ADDC    A,#08DH
0021 FE            MOV     R6,A
0022 ED            MOV     A,R5
0023 345B          ADDC    A,#05BH
0025 FD            MOV     R5,A
0026 E4            CLR     A
0027 3C            ADDC    A,R4
0028 FC            MOV     R4,A
0029 C004          PUSH    AR4
002B C005          PUSH    AR5
002D C006          PUSH    AR6
002F C007          PUSH    AR7
0031 AE00    R     MOV     R6,bitRate
0033 AF00    R     MOV     R7,bitRate+01H
0035 E4            CLR     A
0036 FC            MOV     R4,A
0037 FD            MOV     R5,A
0038 7B18          MOV     R3,#018H
003A FA            MOV     R2,A
003B F9            MOV     R1,A
003C F8            MOV     R0,A
003D 120000  E     LCALL   ?C?LMUL
0040 A804          MOV     R0,AR4
0042 A905          MOV     R1,AR5
0044 AA06          MOV     R2,AR6
0046 AB07          MOV     R3,AR7
0048 D007          POP     AR7
004A D006          POP     AR6
004C D005          POP     AR5
004E D004          POP     AR4
0050 120000  E     LCALL   ?C?ULDIV
0053 120000  E     LCALL   ?C?LNEG
0056 7800    R     MOV     R0,#i
0058 EF            MOV     A,R7
0059 F6            MOV     @R0,A
                                           ; SOURCE LINE # 138
005A F58D          MOV     th1,A
                                           ; SOURCE LINE # 139
005C 8F8B          MOV     tl1,R7
                                           ; SOURCE LINE # 140
005E 22            RET     
             ; FUNCTION _setUartBitRate (END)

             ; FUNCTION uartInterruptHandler (BEGIN)
0000 C0E0          PUSH    ACC
0002 C083          PUSH    DPH
0004 C082          PUSH    DPL
0006 C0D0          PUSH    PSW
0008 C007          PUSH    AR7
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 146
000A 309830        JNB     ri,?C0014
                                           ; SOURCE LINE # 147
000D 900000  R     MOV     DPTR,#uartRxQTail
0010 E0            MOVX    A,@DPTR
0011 FF            MOV     R7,A
0012 900000  R     MOV     DPTR,#uartRxQHead
0015 E0            MOVX    A,@DPTR
0016 C3            CLR     C
0017 9F            SUBB    A,R7
0018 14            DEC     A
0019 5407          ANL     A,#07H
001B D3            SETB    C
001C 9400          SUBB    A,#00H
001E 4019          JC      ?C0015
                                           ; SOURCE LINE # 148
0020 EF            MOV     A,R7
0021 5407          ANL     A,#07H
0023 2400    R     ADD     A,#LOW uartRxQ
0025 F582          MOV     DPL,A
0027 E4            CLR     A
0028 3400    R     ADDC    A,#HIGH uartRxQ
002A F583          MOV     DPH,A
002C E599          MOV     A,sbuf
002E F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
002F C298          CLR     ri
                                           ; SOURCE LINE # 150
0031 900000  R     MOV     DPTR,#uartRxQTail
0034 E0            MOVX    A,@DPTR
0035 04            INC     A
0036 F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0037 8004          SJMP    ?C0014
0039         ?C0015:
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 154
0039 E599          MOV     A,sbuf
                                           ; SOURCE LINE # 157
003B C298          CLR     ri
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
003D         ?C0014:
                                           ; SOURCE LINE # 161
003D 309931        JNB     ti,?C0020
                                           ; SOURCE LINE # 162
0040 C299          CLR     ti
                                           ; SOURCE LINE # 163
0042 900000  R     MOV     DPTR,#uartTxQHead
0045 E0            MOVX    A,@DPTR
0046 FF            MOV     R7,A
0047 900000  R     MOV     DPTR,#uartTxQTail
004A E0            MOVX    A,@DPTR
004B C3            CLR     C
004C 9F            SUBB    A,R7
004D 541F          ANL     A,#01FH
004F D3            SETB    C
0050 9400          SUBB    A,#00H
0052 401A          JC      ?C0018
                                           ; SOURCE LINE # 164
0054 EF            MOV     A,R7
0055 541F          ANL     A,#01FH
0057 2400    R     ADD     A,#LOW uartTxQ
0059 F582          MOV     DPL,A
005B E4            CLR     A
005C 3400    R     ADDC    A,#HIGH uartTxQ
005E F583          MOV     DPH,A
0060 E0            MOVX    A,@DPTR
0061 F599          MOV     sbuf,A
                                           ; SOURCE LINE # 165
0063 900000  R     MOV     DPTR,#uartTxQHead
0066 E0            MOVX    A,@DPTR
0067 04            INC     A
0068 F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0069 750001  R     MOV     transmitterIsRunning,#01H
                                           ; SOURCE LINE # 167
006C 8003          SJMP    ?C0020
006E         ?C0018:
                                           ; SOURCE LINE # 169
006E E4            CLR     A
006F F500    R     MOV     transmitterIsRunning,A
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0071         ?C0020:
0071 D007          POP     AR7
0073 D0D0          POP     PSW
0075 D082          POP     DPL
0077 D083          POP     DPH
0079 D0E0          POP     ACC
007B 32            RETI    
             ; FUNCTION uartInterruptHandler (END)

             ; FUNCTION _initializeUart (BEGIN)
;---- Variable 'bitRate' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 179
0000 C2AC          CLR     es
                                           ; SOURCE LINE # 181
;---- Variable 'i' assigned to Register 'R5' ----
0002 AD8E          MOV     R5,ckcon
                                           ; SOURCE LINE # 182
0004 5305F4        ANL     AR5,#0F4H
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 192
0007 8D8E          MOV     ckcon,R5
                                           ; SOURCE LINE # 194
0009 C2AB          CLR     et1
                                           ; SOURCE LINE # 195
000B C28E          CLR     tr1
                                           ; SOURCE LINE # 196
000D AD89          MOV     R5,tmod
                                           ; SOURCE LINE # 197
000F ED            MOV     A,R5
0010 540F          ANL     A,#0FH
0012 4420          ORL     A,#020H
0014 FD            MOV     R5,A
                                           ; SOURCE LINE # 198
0015 F589          MOV     tmod,A
                                           ; SOURCE LINE # 199
0017 120000  R     LCALL   _setUartBitRate
                                           ; SOURCE LINE # 200
001A D28E          SETB    tr1
                                           ; SOURCE LINE # 206
001C 759870        MOV     scon,#070H
                                           ; SOURCE LINE # 212
001F E599          MOV     A,sbuf
                                           ; SOURCE LINE # 216
0021 E599          MOV     A,sbuf
                                           ; SOURCE LINE # 219
0023 E4            CLR     A
0024 900000  R     MOV     DPTR,#uartRxQTail
0027 F0            MOVX    @DPTR,A
0028 900000  R     MOV     DPTR,#uartRxQHead
002B F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
002C 900000  R     MOV     DPTR,#uartTxQTail
002F F0            MOVX    @DPTR,A
0030 900000  R     MOV     DPTR,#uartTxQHead
0033 F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0034 F500    R     MOV     transmitterIsRunning,A
                                           ; SOURCE LINE # 223
0036 D2BC          SETB    ps
                                           ; SOURCE LINE # 224
0038 D2AC          SETB    es
                                           ; SOURCE LINE # 225
003A 22            RET     
             ; FUNCTION _initializeUart (END)

C51 COMPILER V5.02,  SN-  UART                                                             11/02/16  23:52:55  PAGE 3   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CCF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
TB80 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
ie0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
CCF3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
ie1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
SPIEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
CCF4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
MCE0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
i2cAckIsRequested. . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
CF . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
et0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
et1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
tf0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
et2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
tf1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
i2cInterruptRequested. . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
tf2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
ex0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
th1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
it0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
ex1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
it1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
i2cAck . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
i2cStart . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
ckcon. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
TXBMT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
tl1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
CR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
T2SPLIT. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
TF2H . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
pt0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
REN0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
pt1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
pt2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
tr0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
tr1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TF2L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
tr2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
px0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
ARBLOST. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
px1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
flag . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
cNotT2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
signedWord . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
MODF . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
i2cStop. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
acc. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
ulong. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
S0MODE . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
i2cIsMaster. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
TF2LEN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
rclk . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
tclk . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
sbuf . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
SPIF . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
p3_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
p3_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
scon . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
WCOL . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
tmod . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
NSSMD0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
_initializeUart. . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  bitRate. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
NSSMD1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
T2XCLK . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
rxInterruptFlag. . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
txInterruptFlag. . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
word . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
ea . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
AD0EN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
RI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
TI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
MASTER . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
ACK. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
uartRxQHead. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
uartTxQHead. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
TXMODE . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
PS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
uartInterruptHandler . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
AD0TM. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
es . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
uartRxQ. . . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0002H  8
ri . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
uartTxQ. . . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    000AH  32
ti . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
i2cIsTransmitter . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
ESPI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
ps . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
exen2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
uartRxQTail. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   002AH  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
transmitterIsRunning . . . . . . . . .  STATIC   DATA   U_CHAR   0000H  1
i2cArbitrationIsLost . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
uartTxQTail. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   002BH  1
led1Dark . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
PSPI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
T2SOF. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
_putUartByte . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
RXOVRN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
ACKRQ. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
AD0CM0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
exf2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
getUartByte. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
AD0CM1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
AD0CM2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
cpNotRl2 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
uartRxQHas . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
AD0WINT. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
uartTxQHas . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
_setUartBitRate. . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  bitRate. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  i. . . . . . . . . . . . . . . . . .  STATIC   IDATA  U_CHAR   0000H  1
CCF0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
RB80 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
CCF1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    425    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     44    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       2
   IDATA SIZE       =   ----       1
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
